# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

input AddCommentInput {
  blogId: String!
  commentBody: String!
  userId: String!
}

type AddCommentResponse {
  comment: String
  message: String!
  status: Boolean!
}

type Blog {
  _id: String!
  blogImageUrl: String!
  body: String!
  tags: [String!]
  title: String!
  user: UserCreated!
}

type BlogByTag {
  _id: String!
  blogImageUrl: String
  createdAt: DateTime!
  tags: [String!]
  title: String!
  user: UserInfoTwo
}

type BlogComment {
  _id: String!
  comment: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  user: CommentedUserOnThatBlog!
}

type BlogComments {
  _id: String!
  comments: [BlogComment!]
}

type Blogs {
  _id: String!
  blogImageUrl: String!
  createdAt: DateTime!
  tags: [String!]!
  title: String!
  user: UserInfo!
}

type BlogsArray {
  blogImageUrl: String
  createdAt: DateTime!
  id: String!
  tags: [String!]!
  title: String!
}

type Comment {
  comment: String!
  id: String!
}

type CommentedUserOnThatBlog {
  _id: String!
  image: String!
  name: String!
}

input CreateBlogInput {
  blogImageUrl: String!
  body: String!
  tags: [String!]!
  title: String!
  userId: String!
}

type CreateBlogResponse {
  message: String!
  status: Boolean!
}

type DashboardResponse {
  message: String
  status: Boolean
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DeleteCommentInput {
  blogId: String!
  commentId: String!
}

type DeleteCommentResponse {
  message: String!
  status: Boolean!
}

type GetAllTopicsResponse {
  message: String!
  topics: [Topic!]!
}

input GetBlogInput {
  blogId: String!
}

type GetBlogResponse {
  blog: Blog
  message: String
}

input GetBlogsByTagInput {
  nPerPage: Float!
  pageNumber: Float!
  tag: String!
}

type GetBlogsByTagResponse {
  blogs: [BlogByTag!]
  count: Float!
  message: String!
  next: NextTopicParams
  prevoius: String
}

input GetBlogsInput {
  nPerPage: Float!
  pageNumber: Float!
}

type GetBlogsResponse {
  blogs: [Blogs!]
  count: Float!
  message: String
  next: NextBlogsParams
  prevoius: String
}

input GetCommentsOfBlogInput {
  blogId: String!
}

type GetCommentsOfBlogResponse {
  blogComments: BlogComments
  count: Float
  message: String
  next: NextCommentsParams
  prevoius: String
}

type GetListOfUsersResponse {
  message: String!
  users: [ListOfUsers!]
}

input GetTopBlogsByTopicInput {
  topic: String!
}

type GetTopBlogsByTopicResponse {
  blogs: [TopBlogs!]
  message: String
}

type GetTopTagsByNumberOfPostResponse {
  tag: String
}

input GetUserBlogInput {
  nPerPage: Float!
  pageNumber: Float!
  userId: String!
}

input GetUserBlogsFromOtherUsersInput {
  nPerPage: Float!
  name: String!
  pageNumber: Float!
}

type GetUserBlogsFromOtherUsersResponse {
  blogs: [UserBlogsArray!]
  count: Float!
  message: String!
  next: NextUserBlogsParams2
  prevoius: String
}

type GetUserBlogsResponse {
  blogs: [BlogsArray!]
  count: Float!
  message: String!
  next: NextUserBlogsParams
  prevoius: String
}

input GetUserInfoFromNameInput {
  name: String!
}

type GetUserInfoFromNameResponse {
  message: String!
  user: UserInformation3
}

input GetUserInfoInput {
  userId: String!
}

type GetUserInfoResponse {
  message: String!
  user: UserInformation
}

input ImageUploadInput {
  photo: String!
  username: String!
}

type ImageUploadResponse {
  message: String!
  status: Boolean!
  url: String!
}

type ListOfUsers {
  id: String!
  image: String!
  name: String!
}

type Mutation {
  addComment(addCommentInput: AddCommentInput!): AddCommentResponse!
  createBlog(createBlogInput: CreateBlogInput!): CreateBlogResponse!
  deleteComment(updateCommentInput: DeleteCommentInput!): DeleteCommentResponse!
  imageUpload(imageUploadInput: ImageUploadInput!): ImageUploadResponse!
  updateBio(updateBioInput: UpdateBioInput!): UpdateBioResponse
  updateComment(updateCommentInput: UpdateCommentInput!): UpdateCommentResponse!
}

type NextBlogsParams {
  nPerPage: Float!
  pageNumber: Float!
}

type NextCommentsParams {
  nPerPage: Float!
  pageNumber: Float!
}

type NextTopicParams {
  nPerPage: Float!
  pageNumber: Float!
}

type NextUserBlogsParams {
  nPerPage: Float!
  pageNumber: Float!
}

type NextUserBlogsParams2 {
  nPerPage: Float!
  pageNumber: Float!
}

type Query {
  dashboard: DashboardResponse!
  getAllTopics: GetAllTopicsResponse!
  getBlog(blogId: GetBlogInput!): GetBlogResponse!
  getBlogs(getBlogsInput: GetBlogsInput!): GetBlogsResponse!
  getBlogsByTag(findByTagInput: GetBlogsByTagInput!): GetBlogsByTagResponse!
  getCommentsOfBlog(blogId: GetCommentsOfBlogInput!): GetCommentsOfBlogResponse!
  getListOfUsers: GetListOfUsersResponse
  getTopBlogsByTopicResolver(getTopBlogsByTopicInput: GetTopBlogsByTopicInput!): GetTopBlogsByTopicResponse!
  getTopTagsByNumberOfPost: [GetTopTagsByNumberOfPostResponse!]!
  getUserBlogs(userId: GetUserBlogInput!): GetUserBlogsResponse
  getUserBlogsFromOtherUsers(getUserBlogsFromOtherUsersInput: GetUserBlogsFromOtherUsersInput!): GetUserBlogsFromOtherUsersResponse
  getUserInfo(userId: GetUserInfoInput!): GetUserInfoResponse
  getUserInfoFromName(name: GetUserInfoFromNameInput!): GetUserInfoFromNameResponse
  search(createBlogInput: SearchInput!): SearchResponse!
}

input SearchInput {
  term: String!
}

type SearchResponse {
  message: String!
  result: [SearchResult!]
  status: Boolean!
}

type SearchResult {
  _id: String!
  title: String!
}

type TopBlogs {
  _id: String!
  blogImageUrl: String!
  createdAt: DateTime!
  tags: [String!]!
  title: String!
  user: UserAssociated!
}

type Topic {
  topicColorCode: String!
  topicDescription: String!
  topicName: String!
}

input UpdateBioInput {
  bio: String!
  userId: String!
}

type UpdateBioResponse {
  bio: String
  message: String!
}

input UpdateCommentInput {
  commentBody: String!
  commentId: String!
}

type UpdateCommentResponse {
  comment: Comment
  message: String!
  status: Boolean!
}

type UserAssociated {
  _id: String!
  image: String!
  name: String!
}

type UserBlogsArray {
  blogImageUrl: String
  createdAt: DateTime!
  id: String!
  tags: [String!]!
  title: String!
  user: UserInformation2!
}

type UserCreated {
  _id: String!
  image: String!
  name: String!
}

type UserInfo {
  _id: String!
  image: String!
  name: String!
}

type UserInfoTwo {
  _id: String!
  image: String!
  name: String!
}

type UserInformation {
  bio: String
  id: String!
}

type UserInformation2 {
  bio: String!
  id: String!
  image: String!
  name: String!
}

type UserInformation3 {
  bio: String
  id: String!
  image: String!
  name: String!
}
